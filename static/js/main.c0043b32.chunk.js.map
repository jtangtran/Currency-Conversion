{"version":3,"sources":["Components/CurrencyRow.js","Components/CurrencyConvertor.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","value","onValueChange","readOnly","className","type","onChange","map","option","min","step","CurrencyConvertor","useState","setCurrencyOptions","fromCurrencyCode","setFromCurrencyCode","toCurrencyCode","setToCurrencyCode","errMsg","setErrMsg","userInput","setUserInput","total","setTotal","conversionRate","setConversionRate","displayMsg","setDisplayMsg","useEffect","fetch","then","res","json","data","updatedData","initializeCountryCurrencies","firstCurrencyCodeOption","catch","err","undefined","process","conversion_rate","rounded","conversion_result","toFixed","currencyCodes","forEach","country","currencies","currency","code","push","filter","element","idx","indexOf","e","target","alert","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0043b32.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function CurrencyRow(props) {\n    const {\n        currencyOptions,\n        selectedCurrency,\n        onChangeCurrency,\n        value,\n        onValueChange,\n        readOnly\n    } = props\n    return (\n        <div className=\"text-center\">\n            {/* Changes the input tag to be readOnly if the boolean readOnly is set to true from props */}\n            {readOnly ? (\n                <div>\n                    <input type=\"number\" className=\"col-md-6 m-2\" value={value} readOnly/>\n                    <select className=\"ml-1 form-select\" value={selectedCurrency} onChange={onChangeCurrency}>\n                        {currencyOptions.map(option => (\n                            <option key={option} value={option}>{option}</option>\n                        ))}\n                    </select>\n                </div>\n            ) : (\n                <div>\n                    <input type=\"number\" className=\"col-md-6 m-2\" value={value} min=\"0\" onChange={onValueChange} step=\"0.01\"/>\n                    <select className=\"ml-1 form-select\" value={selectedCurrency} onChange={onChangeCurrency}>\n                        {currencyOptions.map(option => (\n                            <option key={option} value={option}>{option}</option>\n                        ))}\n                    </select>\n                </div>\n            )}\n            \n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport CurrencyRow from './CurrencyRow';\n\nexport default function CurrencyConvertor() {\n    // Country API \n    const countriesAPI = 'https://restcountries.eu/rest/v2/all';\n    //States\n    const [currencyOptions, setCurrencyOptions] = useState([]);\n    const [fromCurrencyCode, setFromCurrencyCode] = useState();\n    const [toCurrencyCode, setToCurrencyCode] = useState();\n    const [errMsg, setErrMsg] = useState(\"\");\n    const [userInput, setUserInput] = useState(1);\n    const [total, setTotal] = useState(1);\n    const [conversionRate, setConversionRate] = useState(1);\n    const [displayMsg, setDisplayMsg] = useState(true);\n    //flag to send to the CurrencyRow\n    let readOnly = true;\n\n    useEffect(() => {\n        //fetches the country api and sets the default values for the fromCurrencyCode and the toCurrencyCode\n        fetch(countriesAPI)\n        .then(res => res.json())\n        .then(data => {\n            let updatedData = initializeCountryCurrencies(data);\n            setCurrencyOptions(updatedData);\n            let firstCurrencyCodeOption = updatedData[\"0\"];\n            setFromCurrencyCode(firstCurrencyCodeOption);\n            setToCurrencyCode(firstCurrencyCodeOption);\n        })\n        .catch(err => {\n            setErrMsg(\"Something went wrong, please try again.\");\n            setDisplayMsg(false);\n        })\n    }, []);\n\n    useEffect(() => {\n        //calculates the conversion amount if the fromCurrencyCode and toCurrencyCode is not undefined and if userInput is greater than 0\n        if (fromCurrencyCode !== undefined && toCurrencyCode !== undefined && userInput > 0) {\n            fetch(`https://v6.exchangerate-api.com/v6/${process.env.REACT_APP_API_KEY}/pair/${fromCurrencyCode}/${toCurrencyCode}/${userInput}`)\n            .then(res => res.json())\n            .then(data => {\n                setConversionRate(data.conversion_rate)\n                //rounds the result of the conversion to 2 decimal places\n                let rounded = data.conversion_result.toFixed(2);\n                setTotal(rounded);\n            })\n            //error when either country code does not exist in the exchange rates api\n            .catch(err => {\n                setErrMsg('Unfortunately the currency code you have entered is not in our system. Please try again with a different currency code.')\n                setDisplayMsg(false)\n            });\n        }\n    }, [fromCurrencyCode, toCurrencyCode, userInput])\n\n    //iterating through the array and retrieving only the first currency code from each country\n    //only adding it to the currencyCodes array if it is not null or none\n    const initializeCountryCurrencies = (data) => {\n        let currencyCodes = [];\n        data.forEach(country => {\n            country.currencies.forEach(currency => {\n                if (currency.code !== '(none)' && currency.code !== null) {\n                    currencyCodes.push(currency.code);\n                }\n            })\n        })\n        //removing the duplicate currencies\n        currencyCodes = currencyCodes.filter((element, idx) => currencyCodes.indexOf(element) === idx);\n        return currencyCodes;\n    }\n\n    //updates the fromCurrencyCode\n    const onChangeFromCurrencyCode = e => {\n        setErrMsg('');\n        setDisplayMsg(true);\n        setFromCurrencyCode(e.target.value);\n    }\n\n    //updates the toCurrencyCode\n    const onChangeToCurrencyCode = e => {\n        setErrMsg('');\n        setDisplayMsg(true);\n        setToCurrencyCode(e.target.value);\n    }\n\n    //switches the fromCurrencyCode to the toCurrencyCode and the toCurrencyCode to the fromCurrencyCode based on the button click\n    const switchCurrencyCode = () => {\n        setFromCurrencyCode(toCurrencyCode);\n        setToCurrencyCode(fromCurrencyCode);\n    }\n\n    //upates the user input and checks if the user input is negative\n    const onUserInputChange = e => {\n        setErrMsg('');\n        setDisplayMsg(true);\n        //handles if the user has entered a negative input and then autocorrects the input to be a 1\n        if (e.target.value === '') {\n            alert('Please enter a valid input of numbers only.');\n            setUserInput(1);\n            return;\n        }\n        else {\n            setUserInput(e.target.value);\n        }\n    }\n\n    return (\n        <div className=\"text-center\">\n            <h1 className=\"mt-4\">Currency Conversion:</h1>\n            <h4 className=\"mt-2 text-success\">Enter a number to begin the currency conversion!</h4>\n            <h5 className=\"mt-3 text-danger\">{errMsg}</h5>\n            { displayMsg ? (\n                <p>The conversion rate for {fromCurrencyCode} to {toCurrencyCode} is {conversionRate}.</p>\n            ) : (<p></p>)}\n            {/* fromCurrencyCode */}\n            <CurrencyRow \n                currencyOptions={currencyOptions} \n                selectedCurrency={fromCurrencyCode} \n                onChangeCurrency={onChangeFromCurrencyCode} \n                value={userInput} \n                onValueChange={onUserInputChange}\n                readOnly={!readOnly}\n            />\n            <div className=\"text-center\">\n                <h5 className=\"\">=</h5>\n                <button className=\"btn-success btn btn-lg m-2\" onClick={switchCurrencyCode}>&#8595;&#8593;</button>\n            </div>\n            {/* toCurrencyCode */}\n            <CurrencyRow \n                currencyOptions={currencyOptions} \n                selectedCurrency={toCurrencyCode} \n                onChangeCurrency={onChangeToCurrencyCode}\n                value={total}\n                readOnly={readOnly}    \n            />\n            { displayMsg ? (\n                <p className=\"text-center\">{userInput} {fromCurrencyCode} is approximately equivalent to {total} {toCurrencyCode} (rounded to 2 decimal places).</p>\n            ) : (<p></p>)}\n\n        </div>\n    )\n}\n","import CurrencyConvertor from './Components/CurrencyConvertor';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CurrencyConvertor />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}